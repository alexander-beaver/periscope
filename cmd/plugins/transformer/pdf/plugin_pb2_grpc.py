# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import plugin_pb2 as plugin__pb2


class NegotiatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Negotiate = channel.stream_stream(
                '/plugin.Negotiator/Negotiate',
                request_serializer=plugin__pb2.NegotiateRequest.SerializeToString,
                response_deserializer=plugin__pb2.NegotiateResponse.FromString,
                )


class NegotiatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Negotiate(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NegotiatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Negotiate': grpc.stream_stream_rpc_method_handler(
                    servicer.Negotiate,
                    request_deserializer=plugin__pb2.NegotiateRequest.FromString,
                    response_serializer=plugin__pb2.NegotiateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plugin.Negotiator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Negotiator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Negotiate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/plugin.Negotiator/Negotiate',
            plugin__pb2.NegotiateRequest.SerializeToString,
            plugin__pb2.NegotiateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PluginStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Load = channel.unary_unary(
                '/plugin.Plugin/Load',
                request_serializer=plugin__pb2.LoadRequest.SerializeToString,
                response_deserializer=plugin__pb2.LoadResponse.FromString,
                )
        self.Terminate = channel.unary_unary(
                '/plugin.Plugin/Terminate',
                request_serializer=plugin__pb2.TerminateRequest.SerializeToString,
                response_deserializer=plugin__pb2.TerminateResponse.FromString,
                )


class PluginServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Load(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Terminate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PluginServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Load': grpc.unary_unary_rpc_method_handler(
                    servicer.Load,
                    request_deserializer=plugin__pb2.LoadRequest.FromString,
                    response_serializer=plugin__pb2.LoadResponse.SerializeToString,
            ),
            'Terminate': grpc.unary_unary_rpc_method_handler(
                    servicer.Terminate,
                    request_deserializer=plugin__pb2.TerminateRequest.FromString,
                    response_serializer=plugin__pb2.TerminateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plugin.Plugin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Plugin(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plugin.Plugin/Load',
            plugin__pb2.LoadRequest.SerializeToString,
            plugin__pb2.LoadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Terminate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plugin.Plugin/Terminate',
            plugin__pb2.TerminateRequest.SerializeToString,
            plugin__pb2.TerminateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ConnectorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ls = channel.stream_stream(
                '/plugin.Connector/Ls',
                request_serializer=plugin__pb2.ListChildrenRequest.SerializeToString,
                response_deserializer=plugin__pb2.DirectoryEntry.FromString,
                )
        self.Cat = channel.unary_unary(
                '/plugin.Connector/Cat',
                request_serializer=plugin__pb2.ReadFileRequest.SerializeToString,
                response_deserializer=plugin__pb2.File.FromString,
                )


class ConnectorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ls(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ls': grpc.stream_stream_rpc_method_handler(
                    servicer.Ls,
                    request_deserializer=plugin__pb2.ListChildrenRequest.FromString,
                    response_serializer=plugin__pb2.DirectoryEntry.SerializeToString,
            ),
            'Cat': grpc.unary_unary_rpc_method_handler(
                    servicer.Cat,
                    request_deserializer=plugin__pb2.ReadFileRequest.FromString,
                    response_serializer=plugin__pb2.File.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plugin.Connector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Connector(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ls(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/plugin.Connector/Ls',
            plugin__pb2.ListChildrenRequest.SerializeToString,
            plugin__pb2.DirectoryEntry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Cat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plugin.Connector/Cat',
            plugin__pb2.ReadFileRequest.SerializeToString,
            plugin__pb2.File.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AnalyzerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Analyze = channel.unary_unary(
                '/plugin.Analyzer/Analyze',
                request_serializer=plugin__pb2.AnalyzeRequest.SerializeToString,
                response_deserializer=plugin__pb2.AnalyzeResponse.FromString,
                )


class AnalyzerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Analyze(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalyzerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Analyze': grpc.unary_unary_rpc_method_handler(
                    servicer.Analyze,
                    request_deserializer=plugin__pb2.AnalyzeRequest.FromString,
                    response_serializer=plugin__pb2.AnalyzeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plugin.Analyzer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Analyzer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Analyze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plugin.Analyzer/Analyze',
            plugin__pb2.AnalyzeRequest.SerializeToString,
            plugin__pb2.AnalyzeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TransformerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Transform = channel.unary_unary(
                '/plugin.Transformer/Transform',
                request_serializer=plugin__pb2.TransformRequest.SerializeToString,
                response_deserializer=plugin__pb2.TransformResponse.FromString,
                )


class TransformerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Transform(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransformerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Transform': grpc.unary_unary_rpc_method_handler(
                    servicer.Transform,
                    request_deserializer=plugin__pb2.TransformRequest.FromString,
                    response_serializer=plugin__pb2.TransformResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plugin.Transformer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Transformer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Transform(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plugin.Transformer/Transform',
            plugin__pb2.TransformRequest.SerializeToString,
            plugin__pb2.TransformResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
